{
	"info": {
		"_postman_id": "0337457b-92e7-4dbb-b763-21b942c4237d",
		"name": "buggy.justtestit.org",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Preparation",
			"item": [
				{
					"name": "Get current vote status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"current_votes\");",
									"",
									"const jsonData = pm.response.json()",
									"const screenModelsUrl = pm.environment.get(\"baseUrl\") + \"/prod/models\"",
									"const totalPages = jsonData.totalPages",
									"",
									"for (i = 1; i <= totalPages; i++) {",
									"    pm.sendRequest(`${screenModelsUrl}?page=${i}`, function (err, response) {",
									"        currentVotes = pm.environment.get(\"current_votes\")",
									"        newVotes = response.json().models",
									"",
									"        if(currentVotes == null) {",
									"            pm.environment.set(\"current_votes\", JSON.stringify(newVotes))",
									"        }",
									"        else {",
									"            let currentVotesObj = JSON.parse(currentVotes)",
									"            let result = currentVotesObj.concat(newVotes)",
									"            pm.environment.set(\"current_votes\", JSON.stringify(result))",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/prod/models",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prod",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Most Popular Make",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"mostPopularMake\");",
									"pm.environment.unset(\"mostPopularMakeCount\");",
									"",
									"const voteStatus = JSON.parse(pm.environment.get(\"current_votes\"))",
									"",
									"let mostPopularMake = null",
									"let mostPopularCount = -1",
									"let makeVotes = {}",
									"",
									"voteStatus.forEach((model) => {",
									"    let columnName = JSON.stringify(model.make)",
									"    let currentVote = makeVotes[columnName] ? model.votes + makeVotes[columnName] : model.votes",
									"    makeVotes[columnName] = Number.parseInt(currentVote)",
									"})",
									"",
									"for(let vote in makeVotes) {",
									"  if (makeVotes.hasOwnProperty(vote)) {",
									"    let count = makeVotes[vote]",
									"    if (count > mostPopularCount) {",
									"      mostPopularMake = vote",
									"      mostPopularCount = count",
									"    }",
									"  }",
									"}",
									"",
									"pm.environment.set(\"mostPopularMake\", mostPopularMake.replace(/\"/g, ''))",
									"pm.environment.set(\"mostPopularMakeCount\", mostPopularCount)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://www.google.com",
							"protocol": "http",
							"host": [
								"www",
								"google",
								"com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Most Popular Model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"mostPopularModel\");",
									"",
									"const voteStatus = JSON.parse(pm.environment.get(\"current_votes\"))",
									"",
									"let mostPopularModel",
									"let currentHighest = 0",
									"",
									"voteStatus.forEach((model) => {",
									"    if (model.votes > currentHighest) {",
									"        currentHighest = model.votes",
									"        mostPopularModel = model",
									"    }",
									"})",
									"",
									"if(mostPopularModel != null) {",
									"    pm.environment.set(\"mostPopularModel\", JSON.stringify(mostPopularModel))",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://www.google.com",
							"protocol": "http",
							"host": [
								"www",
								"google",
								"com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function randomString(lengthUppercase, lengthOthercase, isPassword, lengthNumber, lengthSymbol) {",
									"    let stringResult = '';",
									"    let upperCase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
									"    let otherCase = \"abcdefghijklmnopqrstuvwxyz0123456789\"",
									"    let number = \"0123456789\"",
									"    let symbol = \"!@#$%^&*()_+\"",
									"",
									"    for (let i=0; i<lengthUppercase; i++) {",
									"        stringResult += upperCase.charAt(Math.floor(Math.random() * upperCase.length));",
									"    }",
									"",
									"    for (let i=0; i<lengthOthercase; i++) {",
									"        stringResult += otherCase.charAt(Math.floor(Math.random() * otherCase.length));",
									"    }",
									"",
									"    if(isPassword) {",
									"        for (let i=0; i<lengthNumber; i++) {",
									"            stringResult += number.charAt(Math.floor(Math.random() * number.length));",
									"        }",
									"",
									"        for (let i=0; i<lengthSymbol; i++) {",
									"            stringResult += symbol.charAt(Math.floor(Math.random() * symbol.length));",
									"        }",
									"    }",
									"",
									"",
									"    return stringResult;",
									"}",
									"",
									"pm.environment.set(\"username\", randomString(2, 10));",
									"pm.environment.set(\"password\", randomString(6, 6, true, 1, 1));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://www.google.com",
							"protocol": "http",
							"host": [
								"www",
								"google",
								"com"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dashboard",
			"item": [
				{
					"name": "Access dashboard page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let mostPopularMake = pm.environment.get(\"mostPopularMake\")",
									"let mostPopularMakeCount = pm.environment.get(\"mostPopularMakeCount\")",
									"let mostPopularModel = JSON.parse(pm.environment.get(\"mostPopularModel\"))",
									"",
									"pm.test(\"Dashboard - Access Dashboard: Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Dashboard - Most popular make and its vote count on dashboard should match maker's all model vote sum\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    let dashboardMostPopularMake = jsonData.make.name",
									"    let dashboardMostPopularMakeCount = jsonData.make.votes",
									"",
									"    pm.expect(dashboardMostPopularMake).to.eql(mostPopularMake);",
									"    pm.expect(dashboardMostPopularMakeCount).to.eql(mostPopularMakeCount);",
									"",
									"});",
									"",
									"pm.test(\"Dashboard - Most popular model's vote count on dashboard should match its model vote count\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    let dashboardMostPopularModel = jsonData.model.name",
									"    let dashboardMostPopularModelCount = jsonData.model.votes",
									"",
									"    pm.expect(dashboardMostPopularModel).to.eql(mostPopularModel.name);",
									"    pm.expect(dashboardMostPopularModelCount).to.eql(mostPopularModel.votes);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/prod/dashboard",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prod",
								"dashboard"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login with non-existing account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login - Login attempt with non-existing account rejected with 401 Unauthorised\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "k51qryqov3.execute-api.ap-southeast-2.amazonaws.com"
							},
							{
								"key": "pragma",
								"value": "no-cache"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "origin",
								"value": "http://buggy.justtestit.org"
							},
							{
								"key": "sec-fetch-site",
								"value": "cross-site"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "referer",
								"value": "http://buggy.justtestit.org/"
							},
							{
								"key": "accept-language",
								"value": "en,ko-KR;q=0.9,ko;q=0.8,en-US;q=0.7"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "tstsu",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Tstsu1234",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/prod/oauth/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prod",
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login - Registering a new user is accepted with 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "k51qryqov3.execute-api.ap-southeast-2.amazonaws.com"
							},
							{
								"key": "pragma",
								"value": "no-cache"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "origin",
								"value": "http://buggy.justtestit.org"
							},
							{
								"key": "sec-fetch-site",
								"value": "cross-site"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "referer",
								"value": "http://buggy.justtestit.org/"
							},
							{
								"key": "accept-language",
								"value": "en,ko-KR;q=0.9,ko;q=0.8,en-US;q=0.7"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"firstName\": \"Peter\",\n    \"lastName\": \"Park\",\n    \"password\": \"{{password}}\",\n    \"confirmPassword\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/prod/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prod",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with existing account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login - Login attempt with existing account is accepted with 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login - Access token is generated when loggin in\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
									"    pm.environment.set(\"accessToken\", jsonData.access_token)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "k51qryqov3.execute-api.ap-southeast-2.amazonaws.com"
							},
							{
								"key": "pragma",
								"value": "no-cache"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "origin",
								"value": "http://buggy.justtestit.org"
							},
							{
								"key": "sec-fetch-site",
								"value": "cross-site"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "referer",
								"value": "http://buggy.justtestit.org/"
							},
							{
								"key": "accept-language",
								"value": "en,ko-KR;q=0.9,ko;q=0.8,en-US;q=0.7"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/prod/oauth/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prod",
								"oauth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Vote Model",
			"item": [
				{
					"name": "Vote for a model (without loggin in) - Lamborghini Diablo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vote Model - Voting without login is rejected with 401 Unauthorised\", function () {",
									"    pm.response.to.have.status(401);",
									"",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Not authorized.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "k51qryqov3.execute-api.ap-southeast-2.amazonaws.com"
							},
							{
								"key": "pragma",
								"value": "no-cache"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
							},
							{
								"key": "authorization",
								"value": "Bearer {{accessToken}}",
								"disabled": true
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "origin",
								"value": "http://buggy.justtestit.org"
							},
							{
								"key": "sec-fetch-site",
								"value": "cross-site"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "referer",
								"value": "http://buggy.justtestit.org/"
							},
							{
								"key": "accept-language",
								"value": "en,ko-KR;q=0.9,ko;q=0.8,en-US;q=0.7"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"Test vote\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/prod/models/{{model_lamborghini_diablo}}/vote",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prod",
								"models",
								"{{model_lamborghini_diablo}}",
								"vote"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vote for a model (after loggin in) - Lamborghini Diablo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"prevLamborghiniDiabloVoteCount\");",
									"",
									"// https://k51qryqov3.execute-api.ap-southeast-2.amazonaws.com/prod/models/c0bm09bgagshpkqbsuag%7Cc0bm09bgagshpkqbsuh0",
									"let requestLamborghiniDiablo = pm.environment.get(\"baseUrl\") + \"/prod/models/\" + pm.environment.get(\"model_lamborghini_diablo\");",
									"",
									"// Get current vote count of Lamborghini Diablo",
									"pm.sendRequest(requestLamborghiniDiablo, function (err, response) {",
									"    console.log(response.json());",
									"    let count = response.json().votes",
									"    pm.environment.set(\"prevLamborghiniDiabloVoteCount\", count);",
									"});",
									"",
									"let username = pm.environment.get(\"username\")",
									"",
									"// prepare vote text",
									"pm.environment.set(\"vote_text\", \"Vote text for user \" + username);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// eval(pm.environment.get('waitBeforeExecution'));",
									"// waitBeforeExecution(3); // delay 3 seconds",
									"",
									"let prevCount = pm.environment.get(\"prevLamborghiniDiabloVoteCount\");",
									"let voteText = pm.environment.get(\"vote_text\");",
									"",
									"// https://k51qryqov3.execute-api.ap-southeast-2.amazonaws.com/prod/models/c0bm09bgagshpkqbsuag%7Cc0bm09bgagshpkqbsuh0",
									"let requestLamborghiniDiablo = pm.environment.get(\"baseUrl\") + \"/prod/models/\" + pm.environment.get(\"model_lamborghini_diablo\");",
									"",
									"// Get current vote count of Lamborghini Diablo",
									"pm.sendRequest(requestLamborghiniDiablo, function (err, response) {",
									"    console.log(response.json());",
									"    let responseData = response.json()",
									"    let currCount = responseData.votes",
									"    let currVoteText = responseData.comments[0].text",
									"    let currVoteApplied = responseData.canVote",
									"",
									"    pm.test(\"Vote Model - Vote count is increased by 1\", function () {",
									"        pm.expect(currVoteApplied).to.eql(false);",
									"    });",
									"",
									"    pm.test(\"Vote Model - My vote is applied\", function () {",
									"        pm.expect(currVoteText).to.eql(voteText);",
									"    });",
									"",
									"    pm.test(\"Vote Model - Vote comment is available\", function () {",
									"        pm.expect(currVoteText).to.eql(voteText);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "k51qryqov3.execute-api.ap-southeast-2.amazonaws.com"
							},
							{
								"key": "pragma",
								"value": "no-cache"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
							},
							{
								"key": "authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "origin",
								"value": "http://buggy.justtestit.org"
							},
							{
								"key": "sec-fetch-site",
								"value": "cross-site"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "referer",
								"value": "http://buggy.justtestit.org/"
							},
							{
								"key": "accept-language",
								"value": "en,ko-KR;q=0.9,ko;q=0.8,en-US;q=0.7"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"{{vote_text}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/prod/models/{{model_lamborghini_diablo}}/vote",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prod",
								"models",
								"{{model_lamborghini_diablo}}",
								"vote"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "View Overall Rating",
			"item": [
				{
					"name": "View overall rating - sort by vote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json()",
									"const models = jsonData.models",
									"",
									"let sortedCorrectly = true",
									"let prevVote = 0",
									"",
									"for (i = models.length-1; i >= 0; i--) {",
									"    let currVote = models[i].votes",
									"    if (prevVote > currVote) {",
									"        sortedCorrectly = false",
									"        break",
									"    } ",
									"    prevVote = currVote",
									"}",
									"",
									"pm.test(\"View Overall Rating - Sort by vote is ordered correctly - from high to low\", function () {",
									"    pm.expect(sortedCorrectly).eql(true)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/prod/models?orderBy=vote",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prod",
								"models"
							],
							"query": [
								{
									"key": "orderBy",
									"value": "vote"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View overall rating - sort by rank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json()",
									"const models = jsonData.models",
									"",
									"let sortedCorrectly = true",
									"let prevRank = 0",
									"",
									"for (i = 0; i <= models.length; i++) {",
									"    let currRank = models[i].rank",
									"    if (currRank != prevRank + 1) {",
									"        sortedCorrectly = false",
									"        break",
									"    } ",
									"    prevRank = currRank",
									"}",
									"",
									"pm.test(\"View Overall Rating - Sort by rank is ordered correctly - rank 1, 2, 3...\", function () {",
									"    pm.expect(sortedCorrectly).eql(true)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/prod/models?orderBy=rank",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prod",
								"models"
							],
							"query": [
								{
									"key": "orderBy",
									"value": "rank"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "View Make",
			"item": [
				{
					"name": "View models by make - Lamborghini",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"View models by make - Make description is about Lamborghini\", function () {",
									"    let jsonData = pm.response.json();",
									"    let make = jsonData.name",
									"",
									"    pm.expect(make).to.eql(\"Lamborghini\");",
									"});",
									"",
									"pm.test(\"View models by make - All models in the list are Lamborghini\", function () {",
									"    let jsonData = pm.response.json();",
									"    let models = jsonData.models.models",
									"    let modelsMatch = true",
									"    ",
									"    for (i=0; i<models.length; i++) {",
									"        if(models[i].make != \"Lamborghini\") {",
									"            modelsMatch = false",
									"            break",
									"        }",
									"    }",
									"",
									"    pm.expect(modelsMatch).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/prod/makes/{{make_lamborghini}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prod",
								"makes",
								"{{make_lamborghini}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "View Model",
			"item": [
				{
					"name": "View model - Lamborghini Diablo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"View models - Lamborghini Diablo - Model name is Diablo\", function () {",
									"    let jsonData = pm.response.json();",
									"    let make = jsonData.name",
									"",
									"    pm.expect(make).to.eql(\"Diablo\");",
									"});",
									"",
									"pm.test(\"View models - Lamborghini Diablo - Make name is Lamborghini\", function () {",
									"    let jsonData = pm.response.json();",
									"    let make = jsonData.make",
									"",
									"    pm.expect(make).to.eql(\"Lamborghini\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/prod/models/{{model_lamborghini_diablo}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"prod",
								"models",
								"{{model_lamborghini_diablo}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}